import React, { useState, useEffect } from 'react';
import {
  Search, Map, Calendar, User, Menu, Star, MapPin, Clock, ChevronRight, ArrowLeft
} from 'lucide-react';

const WhatToDoApp = () => {
  const [activeScreen, setActiveScreen] = useState('home');
  const [activeCategory, setActiveCategory] = useState(null);
  const [filterRating, setFilterRating] = useState(0);
  const [city, setCity] = useState('Orlando');
  const [searchQuery, setSearchQuery] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  // Initial venue data with placeholder images
  const popularVenues = [
    { id: 1, name: 'The Rusty Spoon', category: 'food', rating: 4.7, distance: '0.8 mi', image: '/api/placeholder/120/120?text=The+Rusty+Spoon', city: 'Orlando' },
    { id: 2, name: 'Universal Studios', category: 'parks', rating: 4.9, distance: '7.2 mi', image: '/api/placeholder/120/120?text=Universal+Studios', city: 'Orlando' },
    { id: 3, name: 'Dr. Phillips Center', category: 'entertainment', rating: 4.8, distance: '1.2 mi', image: '/api/placeholder/120/120?text=Dr.+Phillips+Center', city: 'Orlando' },
    { id: 4, name: 'Loch Haven Park', category: 'arts', rating: 4.6, distance: '2.0 mi', image: '/api/placeholder/120/120?text=Loch+Haven+Park', city: 'Orlando' },
    { id: 5, name: 'The Plaza Live', category: 'entertainment', rating: 4.5, distance: '1.5 mi', image: '/api/placeholder/120/120?text=The+Plaza+Live', city: 'Orlando' },
    { id: 6, name: 'Daytona Beach', category: 'outdoors', rating: 4.8, distance: '50.2 mi', image: '/api/placeholder/120/120?text=Daytona+Beach', city: 'Daytona Beach' },
    { id: 7, name: 'Daytona International Speedway', category: 'entertainment', rating: 4.9, distance: '49.8 mi', image: '/api/placeholder/120/120?text=Daytona+Speedway', city: 'Daytona Beach' }
  ];

  // Categories with icons
  const categories = [
    { id: 'food', name: 'Food & Dining', color: 'bg-orange-500', icon: 'üçΩÔ∏è' },
    { id: 'drinks', name: 'Drinks & Bars', color: 'bg-purple-500', icon: 'üç∏' },
    { id: 'nightlife', name: 'Nightlife & Clubs', color: 'bg-indigo-600', icon: 'üéµ' },
    { id: 'entertainment', name: 'Entertainment', color: 'bg-red-500', icon: 'üé≠' },
    { id: 'parks', name: 'Theme Parks', color: 'bg-green-500', icon: 'üé¢' },
    { id: 'events', name: 'Events', color: 'bg-yellow-500', icon: 'üéâ' },
    { id: 'arts', name: 'Arts & Culture', color: 'bg-pink-500', icon: 'üé®' },
    { id: 'outdoors', name: 'Outdoors', color: 'bg-emerald-500', icon: 'üèûÔ∏è' },
  ];

  // Filter venues based on criteria
  const filteredVenues = popularVenues.filter(
    venue =>
      venue.rating >= filterRating &&
      (activeScreen === 'category' ? true : venue.city === city) &&
      venue.name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  // Logo component
  const Logo = () => (
    <svg width="24" height="24" viewBox="0 0 512 512" className="text-blue-500">
      <path 
        fill="currentColor" 
        d="M256,0C153.755,0,70.573,83.182,70.573,185.426c0,126.888,165.939,313.167,173.004,321.035
        c6.636,7.391,18.222,7.378,24.846,0c7.065-7.868,173.004-194.147,173.004-321.035C441.425,83.182,358.244,0,256,0z M256,278.719
        c-51.442,0-93.292-41.851-93.292-93.293S204.559,92.134,256,92.134s93.291,41.851,93.291,93.293S307.441,278.719,256,278.719z" 
      />
    </svg>
  );

  // Header component with added logo
  const renderHeader = () => (
    <header className="bg-white shadow p-4 sticky top-0 z-10 flex justify-between items-center border-b border-gray-200">
      <div className="flex items-center">
        {activeScreen !== 'home' && (
          <button 
            onClick={() => setActiveScreen('home')}
            className="mr-2"
          >
            <ArrowLeft className="w-5 h-5 text-gray-600" />
          </button>
        )}
        <Logo />
        <h1 className="text-lg font-bold text-gray-800 ml-2">
          {activeScreen === 'home' ? `What To Do in ${city}` : 
           activeScreen === 'category' ? activeCategory?.name : 
           activeScreen === 'map' ? 'Map View' : 'What To Do'}
        </h1>
      </div>
      <div className="flex items-center">
        <button className="text-gray-600 p-2">
          <User className="w-5 h-5" />
        </button>
        <button className="text-gray-600 p-2">
          <Menu className="w-5 h-5" />
        </button>
      </div>
    </header>
  );

  // Map view component - simplified for preview
  const MapView = () => {
    return (
      <div className="p-4 h-full">
        <div className="bg-white rounded-lg overflow-hidden shadow h-full flex items-center justify-center" style={{ minHeight: '60vh' }}>
          <div className="text-center p-6">
            <div className="mb-4 text-6xl">üó∫Ô∏è</div>
            <h3 className="text-xl font-semibold text-gray-800 mb-2">Map View</h3>
            <p className="text-gray-600 max-w-sm mx-auto">
              This is a placeholder for the interactive map. 
              In the full application, a Leaflet map would display venue locations here.
            </p>
            <div className="mt-4 p-2 rounded-lg bg-gray-100">
              <h4 className="font-medium text-gray-700">Venues in {city}</h4>
              <ul className="mt-2 text-left text-sm">
                {filteredVenues.filter(v => v.city === city).map(venue => (
                  <li key={venue.id} className="py-1 border-b border-gray-200 last:border-0">
                    {venue.name} - {venue.distance}
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Venue card component
  const VenueCard = ({ venue }) => (
    <div className="bg-white rounded-xl p-3 shadow mb-3 hover:shadow-md transition-shadow duration-200">
      <div className="flex gap-3">
        <img 
          src={venue.image} 
          alt={venue.name} 
          className="w-20 h-20 rounded-lg object-cover flex-shrink-0"
        />
        <div className="flex-1">
          <h3 className="text-base font-semibold text-gray-800">{venue.name}</h3>
          <div className="text-sm text-gray-500 flex items-center gap-1">
            <Star className="w-4 h-4 text-yellow-500" /> {venue.rating}
          </div>
          <div className="text-sm text-gray-500 flex items-center gap-1">
            <MapPin className="w-4 h-4" /> {venue.distance}
          </div>
          <div className="text-xs text-gray-400 mt-1">{categories.find(c => c.id === venue.category)?.name || venue.category}</div>
        </div>
        <button className="text-blue-500">
          <ChevronRight className="w-5 h-5" />
        </button>
      </div>
    </div>
  );

  // Home screen component
  const renderHome = () => (
    <div className="p-4 space-y-4">
      <div className="flex items-center gap-2 bg-white p-2 rounded-full shadow-sm">
        <Search className="text-gray-500 ml-2" size={18} />
        <input
          type="text"
          placeholder="Search venues..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className="w-full border-none focus:ring-0 focus:outline-none text-sm"
        />
        <button 
          onClick={() => setActiveScreen('map')}
          className="bg-blue-500 text-white p-2 rounded-full hover:bg-blue-600 transition-colors"
        >
          <Map size={18} />
        </button>
      </div>

      <div className="text-sm text-gray-600 flex items-center justify-between">
        <span>Showing results in <strong>{city}</strong></span>
        <button
          onClick={() => city === 'Orlando' ? setCity('Daytona Beach') : setCity('Orlando')}
          className="text-blue-500 text-xs underline"
        >
          Switch to {city === 'Orlando' ? 'Daytona Beach' : 'Orlando'}
        </button>
      </div>

      <div className="grid grid-cols-2 gap-3">
        {categories.map(cat => (
          <button
            key={cat.id}
            className={`flex items-center justify-center p-3 text-white rounded-xl shadow ${cat.color} hover:opacity-90 transition-opacity`}
            onClick={() => {
              setActiveCategory(cat);
              setActiveScreen('category');
            }}
          >
            <span className="text-xl">{cat.icon}</span>
            <span className="ml-2 font-semibold text-left text-sm leading-tight">{cat.name}</span>
          </button>
        ))}
      </div>

      <div className="bg-white p-4 rounded-xl shadow-sm">
        <label className="block text-sm font-medium text-gray-700 mb-1">Minimum Rating Filter</label>
        <div className="flex justify-between text-xs text-gray-500">
          <span>0</span>
          <span>5</span>
        </div>
        <input
          type="range"
          min={0}
          max={5}
          step={0.5}
          value={filterRating}
          onChange={(e) => setFilterRating(parseFloat(e.target.value))}
          className="w-full accent-blue-500"
        />
        <div className="text-sm text-gray-600 mt-1">Current Filter: {filterRating} stars and up</div>
      </div>

      <div>
        <h2 className="text-lg font-semibold text-gray-800 mb-2">Popular Places</h2>
        {isLoading ? (
          <div className="text-center py-8 bg-white rounded-xl shadow">
            <p className="text-gray-500">Loading venues...</p>
          </div>
        ) : filteredVenues.length === 0 ? (
          <div className="text-center py-8 bg-white rounded-xl shadow">
            <p className="text-gray-500">No venues found matching your criteria.</p>
            <button 
              onClick={() => {
                setFilterRating(0);
                setSearchQuery('');
              }}
              className="mt-2 text-blue-500 text-sm underline"
            >
              Reset filters
            </button>
          </div>
        ) : (
          <div className="space-y-2">
            {filteredVenues.map(venue => (
              <VenueCard key={venue.id} venue={venue} />
            ))}
          </div>
        )}
      </div>
    </div>
  );

  // Category view component
  const renderCategory = () => {
    if (!activeCategory) {
      return (
        <div className="p-4">
          <p className="text-gray-500 text-center py-8 bg-white rounded-xl shadow">No category selected.</p>
          <button
            onClick={() => setActiveScreen('home')}
            className="mt-4 text-blue-500 text-center w-full underline"
          >
            Return to Home
          </button>
        </div>
      );
    }

    const categoryVenues = filteredVenues.filter((v) => v.category === activeCategory.id);

    return (
      <div className="p-4">
        <div className={`flex items-center gap-2 mb-4 p-2 ${activeCategory.color} text-white rounded-lg`}>
          <span className="text-2xl">{activeCategory.icon}</span>
          <h2 className="text-xl font-bold">{activeCategory.name}</h2>
        </div>
        
        {categoryVenues.length === 0 ? (
          <div className="text-center py-8 bg-white rounded-xl shadow">
            <p className="text-gray-500">No venues found in this category.</p>
            <button 
              onClick={() => {
                setFilterRating(0);
                setSearchQuery('');
              }}
              className="mt-2 text-blue-500 text-sm underline"
            >
              Reset filters
            </button>
          </div>
        ) : (
          <div className="space-y-3">
            {categoryVenues.map((venue) => (
              <VenueCard key={venue.id} venue={venue} />
            ))}
          </div>
        )}
      </div>
    );
  };

  // Bottom navigation bar
  const renderBottomNav = () => (
    <nav className="bg-white border-t border-gray-200 fixed bottom-0 w-full max-w-md mx-auto">
      <div className="flex justify-around items-center p-3">
        <button 
          onClick={() => setActiveScreen('home')}
          className={`flex flex-col items-center ${activeScreen === 'home' ? 'text-blue-500' : 'text-gray-500'}`}
        >
          <User size={20} />
          <span className="text-xs mt-1">Home</span>
        </button>
        <button 
          onClick={() => setActiveScreen('map')}
          className={`flex flex-col items-center ${activeScreen === 'map' ? 'text-blue-500' : 'text-gray-500'}`}
        >
          <Map size={20} />
          <span className="text-xs mt-1">Map</span>
        </button>
        <button 
          className="flex flex-col items-center text-gray-500"
        >
          <Calendar size={20} />
          <span className="text-xs mt-1">Events</span>
        </button>
        <button 
          className="flex flex-col items-center text-gray-500"
        >
          <Star size={20} />
          <span className="text-xs mt-1">Saved</span>
        </button>
      </div>
    </nav>
  );

  // Dynamic content based on active screen
  const renderContent = () => {
    switch (activeScreen) {
      case 'home':
        return renderHome();
      case 'category':
        return renderCategory();
      case 'map':
        return <MapView />;
      default:
        return renderHome();
    }
  };

  // Main app render
  return (
    <div className="bg-gray-100 min-h-screen overflow-auto">
      <div className="mx-auto max-w-md min-h-screen border-x border-gray-200 bg-gray-50 relative pb-16">
        {renderHeader()}
        <main className="pb-16">
          {renderContent()}
        </main>
        {renderBottomNav()}
      </div>
    </div>
  );
};

export default WhatToDoApp;