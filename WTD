import React, { useState, useEffect, lazy, Suspense } from 'react';
import {
  Search, Map, Calendar, User, Menu, Star, MapPin, Clock, ChevronRight, ArrowLeft,
  Heart, Share2, ExternalLink, Phone, Globe, Filter, X, CheckCircle, Settings,
  MessageCircle, Info, Sun, Moon, Coffee, Bookmark
} from 'lucide-react';

// Lazy-loaded components for better performance
const VenueDetails = lazy(() => Promise.resolve({ 
  default: (props) => <VenueDetailsComponent {...props} />
}));

const MapView = lazy(() => Promise.resolve({ 
  default: (props) => <MapViewComponent {...props} />
}));

const SavedVenues = lazy(() => Promise.resolve({ 
  default: (props) => <SavedVenuesComponent {...props} />
}));

const EventsView = lazy(() => Promise.resolve({ 
  default: (props) => <EventsViewComponent {...props} />
}));

const WhatToDoApp = () => {
  // State management
  const [activeScreen, setActiveScreen] = useState('home');
  const [activeCategory, setActiveCategory] = useState(null);
  const [filterRating, setFilterRating] = useState(0);
  const [filterDistance, setFilterDistance] = useState(100); // miles
  const [city, setCity] = useState('Orlando');
  const [searchQuery, setSearchQuery] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [errorMessage, setErrorMessage] = useState('');
  const [activeVenue, setActiveVenue] = useState(null);
  const [savedVenues, setSavedVenues] = useState([]);
  const [userLocation, setUserLocation] = useState(null);
  const [showFilters, setShowFilters] = useState(false);
  const [darkMode, setDarkMode] = useState(false);
  const [showNotification, setShowNotification] = useState(false);
  const [notificationMessage, setNotificationMessage] = useState('');
  const [sortBy, setSortBy] = useState('distance'); // 'distance', 'rating', 'name'

  // Popular cities data
  const popularCities = [
    { id: 'orlando', name: 'Orlando', state: 'FL' },
    { id: 'daytona', name: 'Daytona Beach', state: 'FL' },
    { id: 'tampa', name: 'Tampa', state: 'FL' },
    { id: 'miami', name: 'Miami', state: 'FL' },
    { id: 'stpete', name: 'St. Petersburg', state: 'FL' },
  ];

  // Expanded venue data with placeholder images - normally this would come from an API
  const popularVenues = [
    // Food & Dining
    { id: 1, name: 'The Rusty Spoon', category: 'food', rating: 4.7, distance: '0.8 mi', image: '/api/placeholder/120/120?text=The+Rusty+Spoon', city: 'Orlando', priceLevel: '$$', address: '55 W Church St, Orlando, FL 32801', phone: '(407) 555-1234', website: 'https://example.com/rustyspoon', hours: '11AM-10PM', description: 'Farm-to-table Southern cuisine in downtown Orlando featuring locally-sourced ingredients and seasonal menus.' },
    { id: 2, name: 'Kres Chophouse', category: 'food', rating: 4.8, distance: '0.6 mi', image: '/api/placeholder/120/120?text=Kres+Chophouse', city: 'Orlando', priceLevel: '$$$', address: '17 W Church St, Orlando, FL 32801', phone: '(407) 555-5678', website: 'https://example.com/kreschophouse', hours: '5PM-11PM', description: 'Upscale steakhouse in a historic building offering prime cuts and classic cocktails in an elegant setting.' },
    { id: 3, name: 'The Boheme', category: 'food', rating: 4.6, distance: '0.9 mi', image: '/api/placeholder/120/120?text=The+Boheme', city: 'Orlando', priceLevel: '$$$', address: '325 S Orange Ave, Orlando, FL 32801', phone: '(407) 555-9012', website: 'https://example.com/boheme', hours: '6:30AM-10PM', description: 'Sophisticated restaurant in the Grand Bohemian Hotel with artistic ambiance and contemporary American cuisine.' },
    { id: 4, name: 'Reyes Mezcaleria', category: 'food', rating: 4.5, distance: '1.2 mi', image: '/api/placeholder/120/120?text=Reyes+Mezcaleria', city: 'Orlando', priceLevel: '$$', address: '821 N Orange Ave, Orlando, FL 32801', phone: '(407) 555-3456', website: 'https://example.com/reyes', hours: '11AM-10PM', description: 'Modern Mexican restaurant specializing in regional cuisines and featuring an extensive mezcal and tequila selection.' },
    { id: 5, name: 'Se7en Bites', category: 'food', rating: 4.9, distance: '2.3 mi', image: '/api/placeholder/120/120?text=Se7en+Bites', city: 'Orlando', priceLevel: '$$', address: '617 Primrose Dr, Orlando, FL 32803', phone: '(407) 555-7890', website: 'https://example.com/se7enbites', hours: '8AM-4PM', description: 'Beloved bakery and comfort food spot known for Southern-inspired breakfast, lunch, and decadent desserts.' },
    
    // Theme Parks
    { id: 6, name: 'Universal Studios', category: 'parks', rating: 4.9, distance: '7.2 mi', image: '/api/placeholder/120/120?text=Universal+Studios', city: 'Orlando', priceLevel: '$$$', address: '6000 Universal Blvd, Orlando, FL 32819', phone: '(407) 555-1234', website: 'https://example.com/universal', hours: '9AM-8PM', description: 'Movie-themed amusement park with thrilling rides, shows, and attractions based on popular films and TV shows.' },
    { id: 7, name: 'Islands of Adventure', category: 'parks', rating: 4.9, distance: '7.4 mi', image: '/api/placeholder/120/120?text=Islands+of+Adventure', city: 'Orlando', priceLevel: '$$$', address: '6000 Universal Blvd, Orlando, FL 32819', phone: '(407) 555-5678', website: 'https://example.com/islands', hours: '9AM-8PM', description: 'Thrilling theme park featuring immersive lands including The Wizarding World of Harry Potter and Marvel Super Hero Island.' },
    
    // Complete data for all other venues would be here
    
    // More venues from other categories...
    { id: 16, name: 'Loch Haven Park', category: 'arts', rating: 4.6, distance: '2.0 mi', image: '/api/placeholder/120/120?text=Loch+Haven+Park', city: 'Orlando', priceLevel: 'Free', address: '777 E Princeton St, Orlando, FL 32803', phone: '(407) 555-1212', website: 'https://example.com/lochhaven', hours: '6AM-8PM', description: 'Cultural complex and green space housing the Orlando Museum of Art, Mennello Museum, and Orlando Science Center.' },
    
    { id: 21, name: 'The Courtesy', category: 'drinks', rating: 4.8, distance: '0.4 mi', image: '/api/placeholder/120/120?text=The+Courtesy', city: 'Orlando', priceLevel: '$$', address: '114 N Orange Ave, Orlando, FL 32801', phone: '(407) 555-7676', website: 'https://example.com/courtesy', hours: '5PM-2AM', description: 'Craft cocktail bar specializing in handcrafted drinks with fresh ingredients and house-made syrups and bitters.' },
    
    { id: 36, name: 'Lake Eola Park', category: 'outdoors', rating: 4.8, distance: '0.5 mi', image: '/api/placeholder/120/120?text=Lake+Eola+Park', city: 'Orlando', priceLevel: 'Free', address: '512 E Washington St, Orlando, FL 32801', phone: '(407) 555-2222', website: 'https://example.com/lakeeola', hours: '6AM-12AM', description: 'Scenic downtown park featuring a lake with swan boats, walking path, amphitheater, and regular farmers markets.' },
  ];

  // Categories with icons
  const categories = [
    { id: 'food', name: 'Food & Dining', color: 'bg-orange-500', icon: '🍽️' },
    { id: 'drinks', name: 'Drinks & Bars', color: 'bg-purple-500', icon: '🍸' },
    { id: 'nightlife', name: 'Nightlife & Clubs', color: 'bg-indigo-600', icon: '🎵' },
    { id: 'entertainment', name: 'Entertainment', color: 'bg-red-500', icon: '🎭' },
    { id: 'parks', name: 'Theme Parks', color: 'bg-green-500', icon: '🎢' },
    { id: 'events', name: 'Events', color: 'bg-yellow-500', icon: '🎉' },
    { id: 'arts', name: 'Arts & Culture', color: 'bg-pink-500', icon: '🎨' },
    { id: 'outdoors', name: 'Outdoors', color: 'bg-emerald-500', icon: '🏞️' },
  ];

  // Upcoming events data
  const upcomingEvents = [
    { id: 101, name: 'Orlando Farmers Market', date: 'Sundays, 10AM-4PM', venue: 'Lake Eola Park', category: 'events', image: '/api/placeholder/300/150?text=Farmers+Market', city: 'Orlando' },
    { id: 102, name: 'Concert in the Park', date: 'May 15, 7PM', venue: 'Central Park', category: 'entertainment', image: '/api/placeholder/300/150?text=Concert', city: 'Orlando' },
    { id: 103, name: 'Food & Wine Festival', date: 'May 20-22', venue: 'Convention Center', category: 'food', image: '/api/placeholder/300/150?text=Food+Festival', city: 'Orlando' },
    { id: 104, name: 'Art Walk', date: 'First Thursday, 6PM-9PM', venue: 'Downtown', category: 'arts', image: '/api/placeholder/300/150?text=Art+Walk', city: 'Orlando' },
  ];

  // Effect to simulate loading data
  useEffect(() => {
    const fetchData = async () => {
      if (searchQuery.trim() !== '' || activeScreen === 'map') {
        setIsLoading(true);
        
        try {
          // Simulate API call delay
          await new Promise(resolve => setTimeout(resolve, 800));
          
          // API error simulation (10% chance)
          if (Math.random() < 0.1) {
            throw new Error("Failed to connect to server. Please try again.");
          }
          
        } catch (error) {
          setErrorMessage(error.message);
        } finally {
          setIsLoading(false);
        }
      }
    };

    fetchData();
  }, [searchQuery, activeScreen, city]);

  // Effect to get user location (would require permission in real app)
  useEffect(() => {
    // Simulate getting user location
    setUserLocation({ lat: 28.5383, lng: -81.3792 }); // Orlando coordinates
  }, []);

  // Effect for dark mode
  useEffect(() => {
    if (darkMode) {
      document.body.classList.add('dark-mode');
    } else {
      document.body.classList.remove('dark-mode');
    }
  }, [darkMode]);

  // Show notification
  const displayNotification = (message) => {
    setNotificationMessage(message);
    setShowNotification(true);
    
    setTimeout(() => {
      setShowNotification(false);
    }, 3000);
  };

  // Save venue to favorites
  const toggleSavedVenue = (venue) => {
    const isSaved = savedVenues.some(v => v.id === venue.id);
    
    if (isSaved) {
      setSavedVenues(savedVenues.filter(v => v.id !== venue.id));
      displayNotification('Removed from saved places');
    } else {
      setSavedVenues([...savedVenues, venue]);
      displayNotification('Added to saved places');
    }
  };

  // Filter venues based on criteria
  const getFilteredVenues = () => {
    return popularVenues.filter(venue => {
      // Parse distance to number for comparison
      const distanceNum = parseFloat(venue.distance.split(' ')[0]);
      
      return (
        venue.rating >= filterRating &&
        distanceNum <= filterDistance &&
        (activeCategory ? venue.category === activeCategory.id : true) &&
        (activeScreen === 'category' ? true : venue.city === city) &&
        venue.name.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }).sort((a, b) => {
      // Sort based on user preference
      if (sortBy === 'distance') {
        return parseFloat(a.distance) - parseFloat(b.distance);
      } else if (sortBy === 'rating') {
        return b.rating - a.rating;
      } else if (sortBy === 'name') {
        return a.name.localeCompare(b.name);
      }
      return 0;
    });
  };

  const filteredVenues = getFilteredVenues();

  // Logo component
  const Logo = () => (
    <svg width="24" height="24" viewBox="0 0 512 512" className="text-blue-500">
      <path 
        fill="currentColor" 
        d="M256,0C153.755,0,70.573,83.182,70.573,185.426c0,126.888,165.939,313.167,173.004,321.035
        c6.636,7.391,18.222,7.378,24.846,0c7.065-7.868,173.004-194.147,173.004-321.035C441.425,83.182,358.244,0,256,0z M256,278.719
        c-51.442,0-93.292-41.851-93.292-93.293S204.559,92.134,256,92.134s93.291,41.851,93.291,93.293S307.441,278.719,256,278.719z" 
      />
    </svg>
  );

  // Header component with added logo
  const renderHeader = () => (
    <header className={`${darkMode ? 'bg-gray-800 text-white' : 'bg-white text-gray-800'} shadow p-4 sticky top-0 z-10 flex justify-between items-center border-b ${darkMode ? 'border-gray-700' : 'border-gray-200'}`}>
      <div className="flex items-center">
        {activeScreen !== 'home' && (
          <button 
            onClick={() => {
              if (activeScreen === 'venue') {
                setActiveScreen(activeCategory ? 'category' : 'home');
              } else {
                setActiveScreen('home');
              }
              setActiveVenue(null);
            }}
            className="mr-2" 
            aria-label="Go back"
          >
            <ArrowLeft className={`w-5 h-5 ${darkMode ? 'text-gray-300' : 'text-gray-600'}`} />
          </button>
        )}
        <Logo />
        <h1 className={`text-lg font-bold ml-2 ${darkMode ? 'text-white' : 'text-gray-800'}`}>
          {activeScreen === 'home' ? `What To Do in ${city}` : 
           activeScreen === 'category' ? categories.find(c => c.id === activeCategory?.id)?.name : 
           activeScreen === 'map' ? 'Map View' :
           activeScreen === 'venue' && activeVenue ? activeVenue.name :
           activeScreen === 'events' ? 'Events Calendar' :
           activeScreen === 'saved' ? 'Saved Places' :
           'What To Do'}
        </h1>
      </div>
      <div className="flex items-center">
        <button 
          onClick={() => setDarkMode(!darkMode)} 
          className={`p-2 ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}
          aria-label={darkMode ? "Switch to light mode" : "Switch to dark mode"}
        >
          {darkMode ? <Sun className="w-5 h-5" /> : <Moon className="w-5 h-5" />}
        </button>
        <button className={`p-2 ${darkMode ? 'text-gray-300' : 'text-gray-600'}`} aria-label="User profile">
          <User className="w-5 h-5" />
        </button>
        <button className={`p-2 ${darkMode ? 'text-gray-300' : 'text-gray-600'}`} aria-label="Menu">
          <Menu className="w-5 h-5" />
        </button>
      </div>
    </header>
  );

  // Filter component
  const renderFilters = () => (
    <div className={`fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4 ${showFilters ? 'block' : 'hidden'}`}>
      <div className={`${darkMode ? 'bg-gray-800 text-white' : 'bg-white text-gray-800'} rounded-xl shadow-xl p-5 w-full max-w-sm max-h-[80vh] overflow-y-auto`}>
        <div className="flex justify-between items-center mb-4">
          <h3 className="text-lg font-semibold">Filters</h3>
          <button 
            onClick={() => setShowFilters(false)}
            className="text-gray-500 hover:text-gray-700"
            aria-label="Close filters"
          >
            <X className="w-5 h-5" />
          </button>
        </div>
        
        <div className="space-y-6">
          <div>
            <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>
              City
            </label>
            <select 
              value={city}
              onChange={(e) => setCity(e.target.value)}
              className={`w-full p-2 rounded border ${darkMode ? 'bg-gray-700 border-gray-600' : 'bg-white border-gray-300'}`}
            >
              {popularCities.map(city => (
                <option key={city.id} value={city.name}>
                  {city.name}, {city.state}
                </option>
              ))}
            </select>
          </div>
          
          <div>
            <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>
              Minimum Rating
            </label>
            <div className="flex justify-between text-xs text-gray-500">
              <span>0</span>
              <span>5</span>
            </div>
            <input
              type="range"
              min={0}
              max={5}
              step={0.5}
              value={filterRating}
              onChange={(e) => setFilterRating(parseFloat(e.target.value))}
              className="w-full accent-blue-500"
            />
            <div className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'} mt-1`}>
              Current: {filterRating} stars and up
            </div>
          </div>
          
          <div>
            <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>
              Maximum Distance
            </label>
            <div className="flex justify-between text-xs text-gray-500">
              <span>0 mi</span>
              <span>100 mi</span>
            </div>
            <input
              type="range"
              min={1}
              max={100}
              value={filterDistance}
              onChange={(e) => setFilterDistance(parseInt(e.target.value))}
              className="w-full accent-blue-500"
            />
            <div className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'} mt-1`}>
              Current: Within {filterDistance} miles
            </div>
          </div>
          
          <div>
            <label className={`block text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-1`}>
              Sort By
            </label>
            <div className="grid grid-cols-3 gap-2">
              <button
                onClick={() => setSortBy('distance')}
                className={`py-2 px-3 rounded text-sm ${sortBy === 'distance' ? 'bg-blue-500 text-white' : darkMode ? 'bg-gray-700' : 'bg-gray-200'}`}
              >
                Distance
              </button>
              <button
                onClick={() => setSortBy('rating')}
                className={`py-2 px-3 rounded text-sm ${sortBy === 'rating' ? 'bg-blue-500 text-white' : darkMode ? 'bg-gray-700' : 'bg-gray-200'}`}
              >
                Rating
              </button>
              <button
                onClick={() => setSortBy('name')}
                className={`py-2 px-3 rounded text-sm ${sortBy === 'name' ? 'bg-blue-500 text-white' : darkMode ? 'bg-gray-700' : 'bg-gray-200'}`}
              >
                Name
              </button>
            </div>
          </div>
        </div>
        
        <div className="mt-6 flex space-x-3">
          <button
            onClick={() => {
              setFilterRating(0);
              setFilterDistance(100);
              setSortBy('distance');
              setSearchQuery('');
            }}
            className={`flex-1 py-2 ${darkMode ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-200 hover:bg-gray-300'} rounded`}
          >
            Reset All
          </button>
          <button
            onClick={() => setShowFilters(false)}
            className="flex-1 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
          >
            Apply Filters
          </button>
        </div>
      </div>
    </div>
  );

  // Notification component
  const renderNotification = () => (
    <div className={`fixed bottom-20 left-0 right-0 flex justify-center transition-opacity duration-300 ${showNotification ? 'opacity-100' : 'opacity-0 pointer-events-none'}`}>
      <div className="bg-gray-800 text-white px-4 py-2 rounded-full shadow-lg flex items-center">
        <CheckCircle className="w-4 h-4 mr-2" />
        <span>{notificationMessage}</span>
      </div>
    </div>
  );

  // Map view component - would integrate with Leaflet or Google Maps in production
  const MapViewComponent = ({ venues }) => {
    return (
      <div className={`p-4 h-full ${darkMode ? 'bg-gray-900' : 'bg-gray-100'}`}>
        <div className={`${darkMode ? 'bg-gray-800 text-white' : 'bg-white'} rounded-lg overflow-hidden shadow h-full flex items-center justify-center`} style={{ minHeight: '60vh' }}>
          <div className="text-center p-6">
            <div className="mb-4 text-6xl">🗺️</div>
            <h3 className={`text-xl font-semibold mb-2 ${darkMode ? 'text-white' : 'text-gray-800'}`}>Map View</h3>
            <p className={`max-w-sm mx-auto ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
              This would integrate with Leaflet or Google Maps API in the production version to show venues on an interactive map.
            </p>
            <div className={`mt-4 p-2 rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>
              <h4 className={`font-medium ${darkMode ? 'text-gray-200' : 'text-gray-700'}`}>Nearby Venues in {city}</h4>
              <ul className={`mt-2 text-left text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>
                {venues.slice(0, 5).map(venue => (
                  <li key={venue.id} className={`py-2 border-b ${darkMode ? 'border-gray-600' : 'border-gray-200'} last:border-0 flex justify-between items-center`}>
                    <span>{venue.name} - {venue.distance}</span>
                    <button 
                      onClick={() => {
                        setActiveVenue(venue);
                        setActiveScreen('venue');
                      }}
                      className="text-blue-500 hover:text-blue-600"
                    >
                      View
                    </button>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Venue details component
  const VenueDetailsComponent = ({ venue }) => {
    if (!venue) return <div className="p-4 text-center">Venue not found</div>;
    
    const isSaved = savedVenues.some(v => v.id === venue.id);
    
    return (
      <div className={`pb-20 ${darkMode ? 'bg-gray-900 text-white' : 'bg-gray-50'}`}>
        <div className="relative h-48">
          <img 
            src={venue.image.replace('120/120', '500/240')} 
            alt={venue.name} 
            className="w-full h-full object-cover"
          />
          <div className="absolute inset-0 bg-gradient-to-t from-black/70 to-transparent flex items-end">
            <div className="p-4 text-white">
              <h2 className="text-2xl font-bold">{venue.name}</h2>
              <div className="flex items-center mt-1">
                <div className="flex">
                  {[...Array(Math.floor(venue.rating))].map((_, i) => (
                    <Star key={i} className="w-4 h-4 text-yellow-500 fill-yellow-500" />
                  ))}
                  {venue.rating % 1 > 0 && (
                    <Star className="w-4 h-4 text-yellow-500 fill-yellow-500" />
                  )}
                </div>
                <span className="ml-1">{venue.rating}</span>
                <span className="mx-2">•</span>
                <span>{venue.priceLevel}</span>
                <span className="mx-2">•</span>
                <span>{categories.find(c => c.id === venue.category)?.name}</span>
              </div>
            </div>
          </div>
        </div>
        
        <div className="p-4 space-y-4">
          <div className="flex justify-between">
            <button 
              onClick={() => toggleSavedVenue(venue)}
              className={`flex items-center justify-center p-2 rounded-full ${darkMode ? 'bg-gray-800' : 'bg-white'} shadow`}
              aria-label={isSaved ? "Remove from saved places" : "Save to favorites"}
            >
              <Heart className={`w-5 h-5 ${isSaved ? 'text-red-500 fill-red-500' : darkMode ? 'text-gray-300' : 'text-gray-600'}`} />
            </button>
            
            <button 
              className={`flex items-center justify-center p-2 rounded-full ${darkMode ? 'bg-gray-800' : 'bg-white'} shadow`}
              aria-label="Share"
            >
              <Share2 className={`w-5 h-5 ${darkMode ? 'text-gray-300' : 'text-gray-600'}`} />
            </button>
          </div>
          
          <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl shadow p-4`}>
            <div className="flex items-center mb-3">
              <MapPin className="w-5 h-5 text-blue-500 mr-2" />
              <div>
                <p className={`${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>{venue.address}</p>
                <p className={`text-sm ${darkMode ? 'text-blue-400' : 'text-blue-600'}`}>{venue.distance} away</p>
              </div>
            </div>
            
            <div className="grid grid-cols-2 gap-2">
              <button className="py-2 bg-blue-500 text-white rounded-lg flex items-center justify-center">
                <MapPin className="w-4 h-4 mr-1" /> Directions
              </button>
              
              <a 
                href={`tel:${venue.phone}`} 
                className={`py-2 ${darkMode ? 'bg-gray-700' : 'bg-gray-100'} rounded-lg flex items-center justify-center ${darkMode ? 'text-white' : 'text-gray-800'}`}
              >
                <Phone className="w-4 h-4 mr-1" /> Call
              </a>
            </div>
          </div>
          
          <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl shadow p-4`}>
            <h3 className={`text-lg font-semibold mb-2 ${darkMode ? 'text-white' : 'text-gray-800'}`}>Information</h3>
            
            <div className={`flex items-center pb-3 mb-3 border-b ${darkMode ? 'border-gray-700' : 'border-gray-200'}`}>
              <Clock className="w-5 h-5 text-gray-500 mr-3" />
              <div>
                <p className={`font-medium ${darkMode ? 'text-gray-300' : 'text-gray-800'}`}>Hours</p>
                <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>{venue.hours}</p>
              </div>
            </div>
            
            <div className={`flex items-center pb-3 mb-3 border-b ${darkMode ? 'border-gray-700' : 'border-gray-200'}`}>
              <Globe className="w-5 h-5 text-gray-500 mr-3" />
              <div>
                <p className={`font-medium ${darkMode ? 'text-gray-300' : 'text-gray-800'}`}>Website</p>
                <a 
                  href={venue.website} 
                  target="_blank" 
                  rel="noopener noreferrer" 
                  className={`text-sm flex items-center ${darkMode ? 'text-blue-400' : 'text-blue-600'}`}
                >
                  {venue.website.replace('https://', '').replace('example.com/', '')}
                  <ExternalLink className="w-3 h-3 ml-1" />
                </a>
              </div>
            </div>
            
            <div>
              <p className={`font-medium ${darkMode ? 'text-gray-300' : 'text-gray-800'}`}>About</p>
              <p className={`text-sm mt-1 ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>{venue.description}</p>
            </div>
          </div>
          
          <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl shadow p-4`}>
            <h3 className={`text-lg font-semibold mb-3 ${darkMode ? 'text-white' : 'text-gray-800'}`}>Reviews</h3>
            <div className="flex items-center mb-4">
              <Star className="w-6 h-6 text-yellow-500 fill-yellow-500 mr-2" />
              <span className={`text-xl font-semibold ${darkMode ? 'text-white' : 'text-gray-800'}`}>{venue.rating}</span>
              <span className={`mx-2 text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>•</span>
              <span className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>128 reviews</span>
            </div>
            
            <button className="w-full py-2 border border-blue-500 text-blue-500 rounded-lg flex items-center justify-center">
              <MessageCircle className="w-4 h-4 mr-1" /> Write a Review
            </button>
          </div>
          
          <div className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl shadow p-4`}>
            <h3 className={`text-lg font-semibold mb-3 ${darkMode ? 'text-white' : 'text-gray-800'}`}>Similar Places</h3>
            <div className="space-y-3">
              {popularVenues
                .filter(v => v.category === venue.category && v.id !== venue.id)
                .slice(0, 3)
                .map(similar => (
                  <div key={similar.id} className="flex gap-3 items-center">
                    <img 
                      src={similar.image} 
                      alt={similar.name} 
                      className="w-12 h-12 rounded-lg object-cover flex-shrink-0"
                    />
                    <div>
                      <h4 className={`font-medium ${darkMode ? 'text-white' : 'text-gray-800'}`}>{similar.name}</h4>
                      <div className="flex items-center text-sm">
                        <Star className="w-3 h-3 text-yellow-500 fill-yellow-500" />
                        <span className="ml-1">{similar.rating}</span>
                        <span className="mx-1">•</span>
                        <span>{similar.distance}</span>
                      </div>
                    </div>
                    <button 
                      onClick={() => {
                        setActiveVenue(similar);
                        window.scrollTo(0, 0);
                      }}
                      className="ml-auto"
                    >
                      <ChevronRight className={`w-5 h-5 ${darkMode ? 'text-gray-400' : 'text-gray-600'}`} />
                    </button>
                  </div>
                ))}
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Saved venues component
  const SavedVenuesComponent = () => {
    return (
      <div className={`p-4 ${darkMode ? 'bg-gray-900' : 'bg-gray-50'}`}>
        <h2 className={`text-lg font-semibold mb-4 ${darkMode ? 'text-white' : 'text-gray-800'}`}>Your Saved Places</h2>
        
        {savedVenues.length === 0 ? (
          <div className={`text-center py-12 ${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl shadow`}>
            <Bookmark className="w-12 h-12 text-gray-400 mx-auto mb-3" />
            <p className={`${darkMode ? 'text-gray-300' : 'text-gray-700'} mb-2`}>No saved places yet</p>
            <p className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'} max-w-xs mx-auto`}>
              Tap the heart icon on any venue to save it for later
            </p>
            <button 
              onClick={() => setActiveScreen('home')}
              className="mt-4 text-blue-500"
            >
              Browse Places
            </button>
          </div>
        ) : (
          <div className="space-y-3">
            {savedVenues.map(venue => (
              <div 
                key={venue.id} 
                className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl p-3 shadow relative`}
                onClick={() => {
                  setActiveVenue(venue);
                  setActiveScreen('venue');
                }}
              >
                <div className="flex gap-3">
                  <img 
                    src={venue.image} 
                    alt={venue.name} 
                    className="w-20 h-20 rounded-lg object-cover flex-shrink-0"
                  />
                  <div className="flex-1">
                    <h3 className={`text-base font-semibold ${darkMode ? 'text-white' : 'text-gray-800'}`}>{venue.name}</h3>
                    <div className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'} flex items-center gap-1`}>
                      <Star className="w-4 h-4 text-yellow-500 fill-yellow-500" /> {venue.rating}
                    </div>
                    <div className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'} flex items-center gap-1`}>
                      <MapPin className="w-4 h-4" /> {venue.distance}
                    </div>
                    <div className={`text-xs ${darkMode ? 'text-gray-500' : 'text-gray-400'} mt-1`}>
                      {categories.find(c => c.id === venue.category)?.name || venue.category}
                    </div>
                  </div>
                  <button 
                    onClick={(e) => {
                      e.stopPropagation();
                      toggleSavedVenue(venue);
                    }} 
                    className="absolute top-3 right-3"
                    aria-label="Remove from saved places"
                  >
                    <Heart className="w-5 h-5 text-red-500 fill-red-500" />
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
      </div>
    );
  };

  // Events view component
  const EventsViewComponent = () => {
    return (
      <div className={`p-4 ${darkMode ? 'bg-gray-900' : 'bg-gray-50'}`}>
        <div className="flex items-center justify-between mb-4">
          <h2 className={`text-lg font-semibold ${darkMode ? 'text-white' : 'text-gray-800'}`}>Upcoming Events</h2>
          <button className={`text-sm ${darkMode ? 'text-blue-400' : 'text-blue-600'}`}>
            See All
          </button>
        </div>
        
        <div className="overflow-x-auto pb-2 -mx-4 px-4">
          <div className="flex space-x-3" style={{ minWidth: 'max-content' }}>
            {['Today', 'Tomorrow', 'This Weekend', 'Next Week'].map((day, i) => (
              <button
                key={i}
                className={`px-4 py-2 rounded-full text-sm ${i === 0 ? 'bg-blue-500 text-white' : darkMode ? 'bg-gray-800 text-gray-300' : 'bg-white text-gray-700'} shadow-sm`}
              >
                {day}
              </button>
            ))}
          </div>
        </div>
        
        <div className="mt-4 space-y-4">
          {upcomingEvents.map(event => (
            <div key={event.id} className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl overflow-hidden shadow`}>
              <img 
                src={event.image} 
                alt={event.name} 
                className="w-full h-32 object-cover"
              />
              <div className="p-4">
                <h3 className={`font-semibold ${darkMode ? 'text-white' : 'text-gray-800'}`}>{event.name}</h3>
                <div className={`mt-2 flex items-start gap-2 text-sm ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  <Calendar className="w-4 h-4 mt-0.5 flex-shrink-0 text-blue-500" />
                  <span>{event.date}</span>
                </div>
                <div className={`mt-1 flex items-start gap-2 text-sm ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
                  <MapPin className="w-4 h-4 mt-0.5 flex-shrink-0 text-blue-500" />
                  <span>{event.venue}</span>
                </div>
                <div className="mt-3 flex justify-between items-center">
                  <span className={`text-xs px-2 py-1 rounded-full ${darkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>
                    {categories.find(c => c.id === event.category)?.name}
                  </span>
                  <button className="text-blue-500 text-sm font-medium">
                    Details
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  };

  // Venue card component
  const VenueCard = ({ venue }) => {
    const isSaved = savedVenues.some(v => v.id === venue.id);
    
    return (
      <div 
        className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl p-3 shadow mb-3 hover:shadow-md transition-shadow duration-200 relative`}
        onClick={() => {
          setActiveVenue(venue);
          setActiveScreen('venue');
        }}
      >
        <div className="flex gap-3">
          <img 
            src={venue.image} 
            alt={venue.name} 
            className="w-20 h-20 rounded-lg object-cover flex-shrink-0"
          />
          <div className="flex-1">
            <h3 className={`text-base font-semibold ${darkMode ? 'text-white' : 'text-gray-800'}`}>{venue.name}</h3>
            <div className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'} flex items-center gap-1`}>
              <Star className="w-4 h-4 text-yellow-500 fill-yellow-500" /> {venue.rating}
            </div>
            <div className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-500'} flex items-center gap-1`}>
              <MapPin className="w-4 h-4" /> {venue.distance}
            </div>
            <div className={`text-xs ${darkMode ? 'text-gray-500' : 'text-gray-400'} mt-1`}>{categories.find(c => c.id === venue.category)?.name || venue.category}</div>
          </div>
          <button 
            onClick={(e) => {
              e.stopPropagation();
              toggleSavedVenue(venue);
            }}
            className="absolute top-3 right-3"
            aria-label={isSaved ? "Remove from saved" : "Save venue"}
          >
            <Heart className={`w-5 h-5 ${isSaved ? 'text-red-500 fill-red-500' : darkMode ? 'text-gray-400' : 'text-gray-300'}`} />
          </button>
        </div>
      </div>
    );
  };

  // Home screen component
  const renderHome = () => (
    <div className={`p-4 space-y-4 ${darkMode ? 'bg-gray-900' : 'bg-gray-50'}`}>
      <div className={`flex items-center gap-2 ${darkMode ? 'bg-gray-800' : 'bg-white'} p-2 rounded-full shadow-sm`}>
        <Search className={`${darkMode ? 'text-gray-400' : 'text-gray-500'} ml-2`} size={18} />
        <input
          type="text"
          placeholder="Search venues..."
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          className={`w-full border-none focus:ring-0 focus:outline-none text-sm ${darkMode ? 'bg-gray-800 text-white placeholder-gray-500' : 'bg-white text-gray-800'}`}
        />
        <button 
          onClick={() => setShowFilters(true)}
          className={`${darkMode ? 'bg-gray-700 text-gray-300' : 'bg-gray-100 text-gray-600'} p-2 rounded-full hover:bg-gray-200 transition-colors`}
          aria-label="Show filters"
        >
          <Filter size={18} />
        </button>
        <button 
          onClick={() => setActiveScreen('map')}
          className="bg-blue-500 text-white p-2 rounded-full hover:bg-blue-600 transition-colors"
          aria-label="Show map view"
        >
          <Map size={18} />
        </button>
      </div>

      <div className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'} flex items-center justify-between`}>
        <span>Showing results in <strong>{city}</strong></span>
        <div className="flex items-center gap-2">
          <select
            value={city}
            onChange={(e) => setCity(e.target.value)}
            className={`text-xs ${darkMode ? 'bg-gray-800 text-gray-300 border-gray-700' : 'bg-white text-gray-700 border-gray-200'} border rounded py-1 px-2`}
            aria-label="Select city"
          >
            {popularCities.map(city => (
              <option key={city.id} value={city.name}>
                {city.name}
              </option>
            ))}
          </select>
        </div>
      </div>

      <div className="grid grid-cols-2 gap-3">
        {categories.map(cat => (
          <button
            key={cat.id}
            className={`flex items-center justify-center p-3 text-white rounded-xl shadow ${cat.color} hover:opacity-90 transition-opacity`}
            onClick={() => {
              setActiveCategory(cat);
              setActiveScreen('category');
            }}
            aria-label={`Browse ${cat.name}`}
          >
            <span className="text-xl">{cat.icon}</span>
            <span className="ml-2 font-semibold text-left text-sm leading-tight">{cat.name}</span>
          </button>
        ))}
      </div>

      {errorMessage ? (
        <div className={`${darkMode ? 'bg-red-900' : 'bg-red-50'} p-4 rounded-xl ${darkMode ? 'text-red-100' : 'text-red-800'} mb-4 flex items-start gap-2`}>
          <Info className="w-5 h-5 mt-0.5 flex-shrink-0" />
          <div>
            <p className="font-medium">Error loading venues</p>
            <p className="text-sm">{errorMessage}</p>
            <button 
              onClick={() => setErrorMessage('')} 
              className={`mt-2 text-sm ${darkMode ? 'text-red-200' : 'text-red-700'} underline`}
            >
              Try Again
            </button>
          </div>
        </div>
      ) : (
        <>
          <div className="overflow-x-auto pb-2 -mx-4 px-4">
            <div className="flex space-x-3" style={{ minWidth: 'max-content' }}>
              <button className="flex flex-col items-center justify-center w-16 h-16 bg-blue-500 text-white rounded-lg">
                <Coffee className="w-6 h-6 mb-1" />
                <span className="text-xs">Cafés</span>
              </button>
              <button className={`flex flex-col items-center justify-center w-16 h-16 ${darkMode ? 'bg-gray-800' : 'bg-white'} ${darkMode ? 'text-white' : 'text-gray-800'} rounded-lg shadow-sm`}>
                <span className="text-xl mb-1">🍕</span>
                <span className="text-xs">Pizza</span>
              </button>
              <button className={`flex flex-col items-center justify-center w-16 h-16 ${darkMode ? 'bg-gray-800' : 'bg-white'} ${darkMode ? 'text-white' : 'text-gray-800'} rounded-lg shadow-sm`}>
                <span className="text-xl mb-1">🏞️</span>
                <span className="text-xs">Parks</span>
              </button>
              <button className={`flex flex-col items-center justify-center w-16 h-16 ${darkMode ? 'bg-gray-800' : 'bg-white'} ${darkMode ? 'text-white' : 'text-gray-800'} rounded-lg shadow-sm`}>
                <span className="text-xl mb-1">🏊</span>
                <span className="text-xs">Pools</span>
              </button>
              <button className={`flex flex-col items-center justify-center w-16 h-16 ${darkMode ? 'bg-gray-800' : 'bg-white'} ${darkMode ? 'text-white' : 'text-gray-800'} rounded-lg shadow-sm`}>
                <span className="text-xl mb-1">🎬</span>
                <span className="text-xs">Movies</span>
              </button>
            </div>
          </div>

          <div>
            <h2 className={`text-lg font-semibold ${darkMode ? 'text-white' : 'text-gray-800'} mb-2`}>Popular Places</h2>
            {isLoading ? (
              <div className={`text-center py-8 ${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl shadow`}>
                <div className="animate-pulse flex flex-col items-center">
                  <div className="rounded-lg bg-gray-300 w-12 h-12 mb-4"></div>
                  <div className="h-4 bg-gray-300 rounded w-3/4 mb-2"></div>
                  <div className="h-3 bg-gray-300 rounded w-1/2"></div>
                </div>
              </div>
            ) : filteredVenues.length === 0 ? (
              <div className={`text-center py-8 ${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl shadow`}>
                <p className={`${darkMode ? 'text-gray-300' : 'text-gray-500'}`}>No venues found matching your criteria.</p>
                <button 
                  onClick={() => {
                    setFilterRating(0);
                    setFilterDistance(100);
                    setSearchQuery('');
                  }}
                  className={`mt-2 text-blue-500 text-sm underline`}
                >
                  Reset filters
                </button>
              </div>
            ) : (
              <div className="space-y-2">
                {filteredVenues.map(venue => (
                  <VenueCard key={venue.id} venue={venue} />
                ))}
              </div>
            )}
          </div>
          
          <div>
            <div className="flex justify-between items-center mb-2">
              <h2 className={`text-lg font-semibold ${darkMode ? 'text-white' : 'text-gray-800'}`}>Upcoming Events</h2>
              <button 
                onClick={() => setActiveScreen('events')}
                className="text-sm text-blue-500"
              >
                See All
              </button>
            </div>
            <div className="overflow-x-auto pb-2 -mx-4 px-4">
              <div className="flex space-x-3" style={{ minWidth: 'max-content' }}>
                {upcomingEvents.slice(0, 3).map(event => (
                  <div key={event.id} className={`${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-lg shadow w-64 flex-shrink-0 overflow-hidden`}>
                    <img src={event.image} alt={event.name} className="w-full h-24 object-cover" />
                    <div className="p-3">
                      <h3 className={`font-medium ${darkMode ? 'text-white' : 'text-gray-800'} line-clamp-1`}>{event.name}</h3>
                      <p className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-500'} mt-1`}>{event.date} • {event.venue}</p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </>
      )}
    </div>
  );

  // Category view component
  const renderCategory = () => {
    if (!activeCategory) {
      return (
        <div className={`p-4 ${darkMode ? 'bg-gray-900' : 'bg-gray-50'}`}>
          <p className={`text-center py-8 ${darkMode ? 'bg-gray-800 text-gray-300' : 'bg-white text-gray-500'} rounded-xl shadow`}>No category selected.</p>
          <button
            onClick={() => setActiveScreen('home')}
            className="mt-4 text-blue-500 text-center w-full underline"
          >
            Return to Home
          </button>
        </div>
      );
    }

    const categoryVenues = filteredVenues.filter((v) => v.category === activeCategory.id);

    return (
      <div className={`p-4 ${darkMode ? 'bg-gray-900' : 'bg-gray-50'}`}>
        <div className={`flex items-center gap-2 mb-4 p-3 ${activeCategory.color} text-white rounded-lg`}>
          <span className="text-2xl">{activeCategory.icon}</span>
          <div>
            <h2 className="text-xl font-bold">{activeCategory.name}</h2>
            <p className="text-sm text-white text-opacity-80">{categoryVenues.length} places found</p>
          </div>
        </div>
        
        <div className="flex items-center justify-between mb-4">
          <span className={`text-sm ${darkMode ? 'text-gray-300' : 'text-gray-600'}`}>Filter</span>
          <div className="flex gap-2">
            <button 
              onClick={() => setShowFilters(true)}
              className={`text-sm px-3 py-1 rounded-full flex items-center ${darkMode ? 'bg-gray-800 text-gray-300' : 'bg-white text-gray-700'} shadow-sm`}
            >
              <Filter size={14} className="mr-1" /> Filters
            </button>
            <select
              value={sortBy}
              onChange={(e) => setSortBy(e.target.value)}
              className={`text-sm px-3 py-1 rounded-full ${darkMode ? 'bg-gray-800 text-gray-300 border-gray-700' : 'bg-white text-gray-700 border-gray-200'} border`}
              aria-label="Sort by"
            >
              <option value="distance">Distance</option>
              <option value="rating">Rating</option>
              <option value="name">Name</option>
            </select>
          </div>
        </div>
        
        {categoryVenues.length === 0 ? (
          <div className={`text-center py-8 ${darkMode ? 'bg-gray-800' : 'bg-white'} rounded-xl shadow`}>
            <p className={`${darkMode ? 'text-gray-300' : 'text-gray-500'}`}>No venues found in this category.</p>
            <button 
              onClick={() => {
                setFilterRating(0);
                setFilterDistance(100);
                setSearchQuery('');
              }}
              className="mt-2 text-blue-500 text-sm underline"
            >
              Reset filters
            </button>
          </div>
        ) : (
          <div className="space-y-3">
            {categoryVenues.map((venue) => (
              <VenueCard key={venue.id} venue={venue} />
            ))}
          </div>
        )}
      </div>
    );
  };

  // Bottom navigation bar
  const renderBottomNav = () => (
    <nav className={`${darkMode ? 'bg-gray-800 border-gray-700' : 'bg-white border-gray-200'} border-t fixed bottom-0 w-full max-w-md mx-auto z-10`}>
      <div className="flex justify-around items-center p-3">
        <button 
          onClick={() => setActiveScreen('home')}
          className={`flex flex-col items-center ${activeScreen === 'home' ? 'text-blue-500' : darkMode ? 'text-gray-400' : 'text-gray-500'}`}
          aria-label="Home"
        >
          <MapPin size={20} />
          <span className="text-xs mt-1">Explore</span>
        </button>
        <button 
          onClick={() => setActiveScreen('map')}
          className={`flex flex-col items-center ${activeScreen === 'map' ? 'text-blue-500' : darkMode ? 'text-gray-400' : 'text-gray-500'}`}
          aria-label="Map"
        >
          <Map size={20} />
          <span className="text-xs mt-1">Map</span>
        </button>
        <button 
          onClick={() => setActiveScreen('events')}
          className={`flex flex-col items-center ${activeScreen === 'events' ? 'text-blue-500' : darkMode ? 'text-gray-400' : 'text-gray-500'}`}
          aria-label="Events"
        >
          <Calendar size={20} />
          <span className="text-xs mt-1">Events</span>
        </button>
        <button 
          onClick={() => setActiveScreen('saved')}
          className={`flex flex-col items-center ${activeScreen === 'saved' ? 'text-blue-500' : darkMode ? 'text-gray-400' : 'text-gray-500'}`}
          aria-label="Saved"
        >
          <Star size={20} />
          <span className="text-xs mt-1">Saved</span>
        </button>
      </div>
    </nav>
  );

  // Dynamic content based on active screen with Suspense for lazy loading
  const renderContent = () => {
    return (
      <Suspense fallback={
        <div className={`flex justify-center items-center h-[50vh] ${darkMode ? 'text-white' : 'text-gray-800'}`}>
          <div className="text-center">
            <div className="w-8 h-8 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
            <p>Loading...</p>
          </div>
        </div>
      }>
        {activeScreen === 'home' && renderHome()}
        {activeScreen === 'category' && renderCategory()}
        {activeScreen === 'map' && <MapView venues={filteredVenues} />}
        {activeScreen === 'venue' && <VenueDetails venue={activeVenue} />}
        {activeScreen === 'events' && <EventsView />}
        {activeScreen === 'saved' && <SavedVenues />}
      </Suspense>
    );
  };

  // Main app render
  return (
    <div className={`${darkMode ? 'bg-black' : 'bg-gray-100'} min-h-screen overflow-auto`}>
      <div className={`mx-auto max-w-md min-h-screen border-x ${darkMode ? 'border-gray-800 bg-gray-900' : 'border-gray-200 bg-gray-50'} relative pb-16`}>
        {renderHeader()}
        <main className="pb-16">
          {renderContent()}
        </main>
        {renderBottomNav()}
        {renderFilters()}
        {renderNotification()}
      </div>
    </div>
  );
};

export default WhatToDoApp;
